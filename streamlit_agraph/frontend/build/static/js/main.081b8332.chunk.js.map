{"version":3,"sources":["AgraphComponent.tsx","index.tsx"],"names":["AgraphComponent","state","numClicks","render","data","JSON","parse","props","args","config","id","onClickNode","nodeId","window","alert","onDoubleClickNode","onRightClickNode","event","onClickLink","source","target","onRightClickLink","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gPAiBMA,E,4MACGC,MAAQ,CAAEC,UAAW,G,EAErBC,OAAS,WAEd,IAAMC,EAAOC,KAAKC,MAAM,EAAKC,MAAMC,KAAX,MAClBC,EAASJ,KAAKC,MAAM,EAAKC,MAAMC,KAAX,QA8D1B,OACE,kBAAC,QAAD,CACEE,GAAG,WACHN,KAAMA,EACNK,OAAQA,EACRE,YA7CgB,SAASC,GACzBC,OAAOC,MAAP,uBAA6BF,KA6C7BG,kBA1CsB,SAASH,GAC/BC,OAAOC,MAAP,8BAAoCF,KA0CpCI,iBAvCqB,SAASC,EAAYL,GAC1CC,OAAOC,MAAP,6BAAmCF,KAwCnCM,YA7BgB,SAASC,EAAaC,GACtCP,OAAOC,MAAP,+BAAqCK,EAArC,gBAAmDC,KA6BnDC,iBA1BqB,SAASJ,EAAYE,EAAaC,GACvDP,OAAOC,MAAP,qCAA2CK,EAA3C,gBAAyDC,Q,YArDnCE,KAiGfC,cAAwBvB,GC9GvCwB,IAASrB,OACP,kBAAC,IAAMsB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.081b8332.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\n\nimport { Graph } from \"react-d3-graph\";\n\ninterface State {\n  numClicks: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass AgraphComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0 }\n\n  public render = (): ReactNode => {\n\n    const data = JSON.parse(this.props.args[\"data\"]);\n    const config = JSON.parse(this.props.args[\"config\"]);\n\n// const config = {\n//     nodeHighlightBehavior: true\n// };\n\n//     const config = {\n//         nodeHighlightBehavior: nodeHighlightBehavior,\n//         node: {\n//             color: node_color,\n//             size: node_size,\n//             highlightStrokeColor:highlightStrokeColor,\n//         },\n//         link: {\n//             highlightColor: highlightColor,\n//         },\n//   };\n\n    const onClickGraph = function() {\n        window.alert(`Clicked the graph background`);\n    };\n\n    const onClickNode = function(nodeId: any) {\n        window.alert(`Clicked node ${nodeId}`);\n    };\n\n    const onDoubleClickNode = function(nodeId: any) {\n        window.alert(`Double clicked node ${nodeId}`);\n    };\n\n    const onRightClickNode = function(event: any, nodeId: any) {\n        window.alert(`Right clicked node ${nodeId}`);\n    };\n\n    const onMouseOverNode = function(nodeId: any) {\n        window.alert(`Mouse over node ${nodeId}`);\n    };\n\n    const onMouseOutNode = function(nodeId: any) {\n        window.alert(`Mouse out node ${nodeId}`);\n    };\n\n    const onClickLink = function(source: any, target: any) {\n        window.alert(`Clicked link between ${source} and ${target}`);\n    };\n\n    const onRightClickLink = function(event: any, source: any, target: any) {\n        window.alert(`Right clicked link between ${source} and ${target}`);\n    };\n\n    const onMouseOverLink = function(source: any, target: any) {\n        window.alert(`Mouse over in link between ${source} and ${target}`);\n    };\n\n    const onMouseOutLink = function(source: any, target: any) {\n        window.alert(`Mouse out link between ${source} and ${target}`);\n    };\n\n    const onNodePositionChange = function(nodeId: any, x: any, y: any) {\n        window.alert(`Node ${nodeId} is moved to new position. New position is x= ${x} y= ${y}`);\n    };\n\n    return (\n      <Graph\n        id=\"graph-id\"\n        data={data}\n        config={config}\n        onClickNode={onClickNode}\n        onDoubleClickNode={onDoubleClickNode}\n        onRightClickNode={onRightClickNode}\n        // onClickGraph={onClickGraph}\n        onClickLink={onClickLink}\n        onRightClickLink={onRightClickLink}\n      />\n    )\n  }\n\n  // private onClicked = (): void => {\n  //   // Streamlit via `Streamlit.setComponentValue`.\n  //   this.setState(\n  //     prevState => ({ numClicks: prevState.numClicks + 1 }),\n  //     () => Streamlit.setComponentValue(this.state.numClicks)\n  //   )\n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(AgraphComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgraphComponent from \"./AgraphComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgraphComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}